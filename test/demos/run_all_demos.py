# This script instantiates each demo top and generates Verilog into test_build/.
# It also generates area reports for each demo component.
import os
from uhdl import *

# Bitfield
from uhdl.Demo.Bitfield.example_top import BitfieldTop
# DynamicPipeline
from uhdl.Demo.DynamicPipeline.example_top import PipelineTop
# SparseSwitch
from uhdl.Demo.SparseSwitch.example_top import SparseSwitchTop
# RomFromFile
from uhdl.Demo.RomFromFile.example_top import RomTop


def build(comp, demo_name):
    """Build verilog and generate area report for a demo component."""
    comp.output_dir = 'test_build'
    comp.generate_verilog(iteration=True)
    
    # Generate area report
    generate_area_report(comp, demo_name)


def generate_area_report(comp, demo_name):
    """Generate area report for a demo component."""
    # Update instance tree to populate area calculation data
    comp.update_instance_tree()
    
    # Generate area report
    area_report = comp.report_area()
    total_area = comp.get_area()
    
    # Create area report directory if it doesn't exist
    area_report_dir = f'test_build/demos/{demo_name}/area_reports'
    os.makedirs(area_report_dir, exist_ok=True)
    
    # Write area report to file
    report_file = os.path.join(area_report_dir, f'{demo_name}_area_report.txt')
    with open(report_file, 'w') as f:
        f.write(f"=== {demo_name} Demo Area Report ===\n")
        f.write(f"Generated by UHDL run_all_demos.py\n")
        f.write(f"Total Area: {total_area:.3f}\n")
        f.write(f"Instance Count: {len(comp._sub_instance_list)}\n")
        f.write("\n" + "="*60 + "\n\n")
        f.write(area_report)
        f.write(f"\n\n" + "="*60 + "\n")
        f.write(f"Summary:\n")
        f.write(f"  - Total Normalized Area: {total_area:.3f}\n")
        f.write(f"  - Total Instances: {len(comp._sub_instance_list)}\n")
        
        # Calculate breakdown by instance type
        type_breakdown = {}
        for instance in comp._sub_instance_list:
            instance_type = type(instance).__name__
            if hasattr(instance, 'get_area'):
                area = instance.get_area()
                if instance_type not in type_breakdown:
                    type_breakdown[instance_type] = {'count': 0, 'total_area': 0.0}
                type_breakdown[instance_type]['count'] += 1
                type_breakdown[instance_type]['total_area'] += area
        
        f.write(f"  - Instance Type Breakdown:\n")
        for inst_type, data in sorted(type_breakdown.items()):
            f.write(f"    {inst_type}: {data['count']} instances, {data['total_area']:.3f} area\n")
    
    print(f"[{demo_name}] Area report generated: {report_file}")
    print(f"[{demo_name}] Total area: {total_area:.3f}")
    
    return total_area


def main():
    print("Building all UHDL demos with area reports...")
    print("=" * 60)
    
    # Build each demo and collect area data
    demo_areas = {}
    
    demos = [
        (BitfieldTop(), 'Bitfield'),
        (PipelineTop(), 'DynamicPipeline'),
        (SparseSwitchTop(), 'SparseSwitch'),
        (RomTop(), 'RomFromFile')
    ]
    
    for comp, demo_name in demos:
        try:
            print(f"\nBuilding {demo_name} demo...")
            build(comp, demo_name)
            demo_areas[demo_name] = comp.get_area()
        except Exception as e:
            print(f"Error building {demo_name}: {e}")
            demo_areas[demo_name] = 0.0
    
    # Generate comparison report
    print(f"\nGenerating comparison report...")
    os.makedirs('test_build/demos/area_reports', exist_ok=True)
    comparison_file = 'test_build/demos/area_reports/run_all_demos_comparison.txt'
    
    with open(comparison_file, 'w') as f:
        f.write("=== UHDL Demo Area Comparison Report ===\n")
        f.write("Generated by run_all_demos.py\n\n")
        
        f.write("Demo Area Summary:\n")
        f.write("-" * 40 + "\n")
        for demo_name, area in sorted(demo_areas.items(), key=lambda x: x[1], reverse=True):
            f.write(f"{demo_name:20} : {area:8.3f}\n")
        
        f.write(f"\nTotal Combined Area: {sum(demo_areas.values()):.3f}\n")
        f.write(f"Average Demo Area: {sum(demo_areas.values())/len(demo_areas):.3f}\n")
        
        # Find largest and smallest
        if demo_areas:
            largest = max(demo_areas.items(), key=lambda x: x[1])
            smallest = min(demo_areas.items(), key=lambda x: x[1])
            f.write(f"Largest Demo: {largest[0]} ({largest[1]:.3f})\n")
            f.write(f"Smallest Demo: {smallest[0]} ({smallest[1]:.3f})\n")
            if smallest[1] > 0:
                f.write(f"Size Ratio (Largest/Smallest): {largest[1]/smallest[1]:.2f}x\n")
    
    print(f"Comparison report generated: {comparison_file}")
    print("\n" + "=" * 60)
    print("DEMO AREA SUMMARY:")
    for demo_name, area in sorted(demo_areas.items(), key=lambda x: x[1], reverse=True):
        print(f"  {demo_name:20} : {area:8.3f}")
    print("=" * 60)
    print("All demos built successfully with area reports!")


if __name__ == '__main__':
    main()
